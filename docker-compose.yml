version: "3"
services:
  # TODO: Do we need aliases?
  #db:
  #  image: mariadb:latest
  #  volumes:
  #    - ./data/mysql:/var/lib/mysql
  #  networks:
  #    - db

  # TODO: Password etc

  #web:
  #  build: ./containers/web
  #  context: ./containers/web
    #ports:
    #  - 5000:80
  #  networks:
  #    - db
  #    - web
  #  depends_on:
  #    - db

  #images:
  #  networks:
  #    - images
  #    - web
  #  depends_on:
  #    - web

  # TODO: Restart on failure, etc.
  # # TODO: Ramdisk for the temporary image storage?

  network_manager: # Listens to docker events and attaches the network interface to the span container when it starts
    container_name: network_manager
    build:
      context: ./containers/network_manager
    privileged: true # TODO: Can we use cap_add instead?
    network_mode: host
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SPAN_INTERFACE: "${SPAN_INTERFACE:-eno2}"

  span: # Allows all the containers containing packet analyzers to access the span network interface
    container_name: span
    image: alpine:3.4
    command: tail -f /dev/null # Command to keep the container alive
    networks:
      - images
      - web
    depends_on:
      - network_manager

  driftnet:
    build:
      context: ./containers/driftnet
    volumes:
      - /data:/data
    environment:
      NODE_ENV: production
      SPAN_INTERFACE: "${SPAN_INTERFACE:-eno2}"
      IMAGE_PATH: /data
    network_mode: service:span # We share the network stack of the span container to be able to access the physical interface
    depends_on:
      - span
    #  - images
    cap_add:
      - NET_ADMIN # TODO: Is this needed?
    restart: always # TODO: Only on failure, make sure app exits abnormally on error?

  # ngrep:
  #   build:
  #     context: ./containers/ngrep
  #   network_mode: host
  #   # networks:
  #   #   - images
  #   #   - scanner
  #   #depends_on:
  #     #- images
  #   cap_add:
  #     - NET_ADMIN

  # dsniff:
  #   build:
  #     context: ./containers/dsniff
  #   network_mode: host
  #   # networks:
  #   #   - web
  #   #   - scanner
  #   #depends_on:
  #     #- web
  #   cap_add:
  #     - NET_ADMIN

  # ettercap:
  #   build:
  #     context: ./containers/ettercap
  #   network_mode: host
  #   # networks:
  #   #   - web
  #   #   - scanner
  #   #depends_on:
  #     #- web
  #   cap_add:
  #     - NET_ADMIN

  # tshark:
  #   build:
  #     context: ./containers/tshark
  #   network_mode: host
  #   # networks:
  #   #   - web
  #   #   - scanner
  #   #depends_on:
  #     #- web
  #   cap_add:
  #     - NET_ADMIN

  # pvs:
  #   networks:
  #     - web
  #  depends_on:
      #- web
#    cap_add:
#      - NET_ADMIN

networks:
  #database:
  images:
  web:
